import time
import random
import math

class Map:
    def __init__(self):
        self.walls = [];

    def add_wall(self,wall):
        self.walls.append(wall);

    def clear(self):
        self.walls = [];

    

                       
mymap = Map();
# Definitions of walls
# a: O to A
# b: A to B
# c: C to D
# d: D to E
# e: E to F
# f: F to G
# g: G to H
# h: H to O
mymap.add_wall((0,0,0,168));        # a
mymap.add_wall((0,168,84,168));     # b
mymap.add_wall((84,126,84,210));    # c
mymap.add_wall((84,210,168,210));   # d
mymap.add_wall((168,210,168,84));   # e
mymap.add_wall((168,84,210,84));    # f
mymap.add_wall((210,84,210,0));     # g
mymap.add_wall((210,0,0,0));        # h
          
            
def calculate_likelihood(float x, float y, float theta, float z):
    m = -1
    for i in range(8):
        Ax = mymap.walls[i][0]
        Ay = mymap.walls[i][1]
        Bx = mymap.walls[i][2]
        By = mymap.walls[i][3]
        d = ((By-Ay)*(Ax-x)-(Bx-Ax)*(Ay-y))/((By-Ay)*math.cos(theta)-(Bx-Ax)*math.sin(theta))
        if d>0:
            x_inwall = x+d*math.cos(theta)
            y_inwall = y+d*math.sin(theta)
            if (x_inwall-Ax)*(x_inwall-Bx)+(y_inwall-Ay)*(y_inwall-By)<=0 and (m<0 or d<m)
                m = d
    sigma_s = 1 # standard deviation for sensor in cm    
return math.exp(-(z-m)**2/(2*sigma_s**2))

print calculate_likelihood(10.0,10.0,0,200.0)
            
    