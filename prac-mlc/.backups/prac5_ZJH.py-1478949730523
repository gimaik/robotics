import time
import random
import math
from version3 import *

interface=brickpi.Interface()
interface.initialize()

class Map:
    def __init__(self):
        self.walls = [];
        self.loc = [];

    def add_wall(self,wall):
        self.walls.append(wall);

    def add_loc(self,loc):
        self.loc.append(loc);

    def clear(self):
        self.walls = [];

    

port2 = 2

interface.sensorEnable(port2, brickpi.SensorType.SENSOR_ULTRASONIC);
                       
mymap = Map();
# Definitions of walls
# a: O to A
# b: A to B
# c: C to D
# d: D to E
# e: E to F
# f: F to G
# g: G to H
# h: H to O
mymap.add_wall((0,0,0,168));        # a
mymap.add_wall((0,168,84,168));     # b
mymap.add_wall((84,126,84,210));    # c
mymap.add_wall((84,210,168,210));   # d
mymap.add_wall((168,210,168,84));   # e
mymap.add_wall((168,84,210,84));    # f
mymap.add_wall((210,84,210,0));     # g
mymap.add_wall((210,0,0,0));        # h

mymap.add_loc((84,30));        
mymap.add_loc((180,30));        
mymap.add_loc((180,54));        
mymap.add_loc((138,54));        
mymap.add_loc((138,168));        
mymap.add_loc((114,168));        
mymap.add_loc((114,84));        
mymap.add_loc((84,84));        
mymap.add_loc((84,30));        


          
            
def calculate_likelihood(x, y, theta, z):
    m = -1
    for i in range(8):
        Ax = mymap.walls[i][0]
        Ay = mymap.walls[i][1]
        Bx = mymap.walls[i][2]
        By = mymap.walls[i][3]
        d = ((By-Ay)*(Ax-x)-(Bx-Ax)*(Ay-y))/((By-Ay)*math.cos(theta)-(Bx-Ax)*math.sin(theta)+0.00000000001)
        if d>0:
            x_inwall = x+d*math.cos(theta)
            y_inwall = y+d*math.sin(theta)
            if (x_inwall-Ax)*(x_inwall-Bx)+(y_inwall-Ay)*(y_inwall-By)<=0 and (m<0 or d<m):
                m = d
    sigma_s = 1 # standard deviation for sensor in cm    
    return math.exp(-(z-m)**2/(2*sigma_s**2))





NOP = 100 #numbef of particle
SIGMA_E = 1 # gaussian error in distance angle
SIGMA_F = 0.01 # gaussian error in straight line moving angle
SIGMA_G = 0.02 # gaussian error in rotation angle




P = [] #particle
for i in range(NOP):
    P.append(Dot(mymap.loc[0][0],mymap.loc[0][1],0,1.0/NOP))  # just take the same weight

    
    
    # divide each edge of the square into 4 pieces and run one at a time then sleep for a while


for i in range(1,9):
    curr = get_average_point(P)
    curr_1 = []
    curr_1.append(Dot(curr[0],curr[1],curr[2],1))   
    
    (D,angle_diff) = navigateToWaypointAux(mymap.loc[i][0], mymap.loc[i][0], curr_1[0])
    for j in range(NOP):
        P[k].x += (D+random.gauss(0, SIGMA_E))*math.cos(P[k].theta)
        P[k].y += (D+random.gauss(0, SIGMA_E))*math.sin(P[k].theta)
        P[k].theta += random.gauss(0,SIGMA_F)
        P[k].theta += angle_diff+random.gauss(0,SIGMA_G)
    
    
    z = 0
    z_n = 0
    
    for j in range(30):   
        usReading.append(interface.getSensorValue(port2))
        time.sleep(0.01)
    for j  in range(30):
        if usReading[j]<255:
            z_n += 1
            z += usReading[j]
    
    if z_n==0:
        z = 255
    else:
        z = float(z)/z_n
    
    for j in range(NOP):
        P[j].w = calculate_likelihood(P[j].x, P[j].y, p[j].theta, z)
    
    w_sum = 0
    for j in range(NOP):
        w_sum += P[j].w
        
    for j in range(NOP):
        P[j].w = P{j].w/w_sum
                   
    curr = get_average_point(P)
    var = [0,0,0]
    for j in range(NOP):
        var[0] += P[j].w*(curr[0]-P[j].x)**2
        var[1] += P[j].w*(curr[1]-P[j].y)**2
        var[2] += P[j].w*(curr[2]-P[j].theta)**2
    
    for j in range(NOP):
        P[j].x = random.gauss(curr[0], var[0])
        P[j].y = random.gauss(curr[1], var[1])
        P[j].theta = random.gauss(curr[2], var[2])
        P[j].w = 1.0/NOP
        
        # Create a list of particles to draw. This list should be filled by tuples (x, y, theta).



interface.terminate()






  
    

