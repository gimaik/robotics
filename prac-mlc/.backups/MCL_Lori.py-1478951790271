#!/usr/bin/env python 

# Some suitable functions and data structures for drawing a map and particles

import time
import random
import math

SIGMA_E = 0
SIGMA_F = 0

# Functions to generate some dummy particles data:
def calcX():
    return random.gauss(80,3) + 70*(math.sin(t)); # in cm

def calcY():
    return random.gauss(70,3) + 60*(math.sin(2*t)); # in cm

def calcW():
    return random.random();

def calcTheta():
    return random.randint(0,360);

# A Canvas class for drawing a map and particles:
# 	- it takes care of a proper scaling and coordinate transformation between
#	  the map frame of reference (in cm) and the display (in pixels)
class Canvas:
    def __init__(self,map_size=210):
        self.map_size    = map_size;    # in cm;
        self.canvas_size = 768;         # in pixels;
        self.margin      = 0.05*map_size;
        self.scale       = self.canvas_size/(map_size+2*self.margin);

    def drawLine(self,line):
        x1 = self.__screenX(line[0]);
        y1 = self.__screenY(line[1]);
        x2 = self.__screenX(line[2]);
        y2 = self.__screenY(line[3]);
        print "drawLine:" + str((x1,y1,x2,y2))

    def drawParticles(self,data):
        display = [(self.__screenX(d[0]),self.__screenY(d[1])) + d[2:] for d in data];
        print "drawParticles:" + str(display);

    def __screenX(self,x):
        return (x + self.margin)*self.scale #ol

    def __screenY(self,y):
        return (self.map_size + self.margin - y)*self.scale

# A Map class containing walls
class Map:
    def __init__(self):
        self.walls = [];

    def add_wall(self,wall):
        self.walls.append(wall);

    def clear(self):
        self.walls = [];

    def draw(self):
        for wall in self.walls:
            canvas.drawLine(wall);
    
    #def find_closest_wall(particle_x,particle_y,particle_theta):
	#for wall in self.walls:
	

def generate_points(n):
    data = []
    for i in range(n):
	data.append((0.0,0.0,0.0,1.0/n))
    return data

def calculate_likelihood(x, y, theta, z):
    #find closest distance to wall
    min_dist = -1
    for wall in mymap.walls:
	m = ( (wall[3] - wall[1])*(wall[0] - x) - (wall[2] - wall[0])*(wall[1] - y) ) / ( (wall[3] - wall[1]) * math.cos(theta) - (wall[2] - wall[0]) * math.sin(theta))
	if m < 0:
		continue  #wall is behind robot
	intersection_x = x + m * math.cos(theta)
	intersection_y = y + m * math.sin(theta)
	#------------------------------------------------------------------------
	if (wall[0] > wall[2]):
		if intersection_x > wall[0] or intersection_x < wall[2]:
			continue    #robot does not intersect wall
	if (wall[0] < wall[2]):
		if intersection_x < wall[0] or intersection_x > wall[2]:
			continue    #robot does not intersect wall
	if (wall[0] == wall[2]):
		if (wall[1] > wall[3]):
			if intersection_y > wall[1] or intersection_y < wall[3]:
				continue    #robot does not intersect wall
		if (wall[1] < wall[3]):
			if intersection_y < wall[1] or intersection_y > wall[3]:
				continue    #robot does not intersect wall		
	#------------------------------------------------------------------------
	if (min_dist == -1):
		min_dist = m
	elif (min_dist > m):
		min_dist = m
    prob = math.exp( -(z - m)*(z - m) / 2 * deviation_sensor * deviation_sensor)
    return prob	
	

# Simple Particles set
class Particles:
    def __init__(self):
        self.n = 10;    
        self.data = generate_points(self.n)

    def update(self, z, dist):
	    for i in range(self.n):
	        self.data[i][0] += (dist+random.gauss(0, SIGMA_E))*math.cos(self.data[i][2])
            self.data[i][1] += (dist+random.gauss(0, SIGMA_E))*math.sin(self.data[i][2])
            self.data[i][2] += random.gauss(0,SIGMA_F)
	        self.data[i][3] = self.data[i][3] * calculate_likelihood(self.data[i][0], self.data[i][1], self.data[i][2], z)
    
    def getX(self, point):
	    return point[0]

    def getY(self, point):
	    return point[1]

    def getTheta(self, point):
	    return point[2]

    def getWeight(self, point):
	    return point[3]

    def draw(self):
        canvas.drawParticles(self.data);

    def normalizeData(self):
	sum = 0.0
	for i in range(self.n):
	    sum += self.data[i][3]
	for i in range(self.n):
	    self.data[i][3] /= sum	    
	
    def copyPoint(self, point):
	return (point[0], point[1], point[2], 1.0/self.n)

    def regenerateParticles(self):
	sum = 0.0
	cumDist = []
	#create cumulative distribution list
	for i in range(self.n):
	    sum += self.data[i][3]
	    cumDist.append(sum)
	#generate new data
	newData = []
	for i in range(self.n):
	    randomNum = random.random()
	    pos = (-1)
	    for j in range(self.n):
		if cumDist[j] > randomNum:
		    pos = j
		    break
	    if pos == -1:
		pos = self.n-1
	    newData.append(self.copyPoint(self.data[pos]))
	self.data = newData

    def computeAvg(self):
	sum = (0.0, 0.0, 0.0, 0.0)
	for i in range(self.n):
        sum[0] += data[i][0]*data[i][3]
	    sum[1] += data[i][1]*data[i][3]
	    sum[2] += data[i][2]*data[i][3]
	return sum

canvas = Canvas();

mymap = Map();
# Definitions of walls
# a: O to A
# b: A to B
# c: C to D
# d: D to E
# e: E to F
# f: F to G
# g: G to H
# h: H to O
mymap.add_wall((0,0,0,168));        # a
mymap.add_wall((0,168,84,168));     # b
mymap.add_wall((84,126,84,210));    # c
mymap.add_wall((84,210,168,210));   # d
mymap.add_wall((168,210,168,84));   # e
mymap.add_wall((168,84,210,84));    # f
mymap.add_wall((210,84,210,0));     # g
mymap.add_wall((210,0,0,0));        # h
mymap.draw();

particles = Particles()

print particles.data
particles.regenerateParticles()
print particles.data
particles.regenerateParticles()
print particles.data

t = 0;
#while True:
#    particles.update();
#    particles.draw();
#    t += 0.05;
#    time.sleep(0.05);
